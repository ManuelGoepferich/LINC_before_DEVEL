return(Cppspear)
}
if(corMethod != "spearman" &&
corMethod != "user"){
useFunction <- stats::cor
method <- corMethod
if(cor_use == "pairwise"){
use <- "pairwise.complete.obs"
} else {
use <- "evertyhing"
}
nonCppf <- function(useFunction, method,
use, ...){
function(pcmatrix, ncmatrix, ...){
x <- 1:(nrow(pcmatrix));  lx <- length(x)
y <- 1:(nrow(ncmatrix)); ly <- length(y)
MM <- matrix(ncol = lx * ly , nrow = 2)
MM[1,] <- rep(x, times = ly )
MM[2,] <- as.vector(unlist(lapply(y,
function(y, lx) {rep(y, times = lx)}, lx)))
cormatrix <- matrix(ncol = ly , nrow = lx )
for(i in 1:ncol(MM)){
z1 <- MM[1,i]
z2 <- MM[2,i]
cormatrix[z1,z2] <- useFunction(
pcmatrix[z1, ], ncmatrix[z2, ],
method = method, use = use, ...)
}
return(cormatrix)
} # function end inner
} # function end
to_apply <- nonCppf(useFunction, method, use)
return(to_apply)
}
} else {
# else: apply user function
if(!is.function(match.fun(userFun))){
stop("'userFun' is not a valid function")
}
useFunction <- match.fun(userFun)
if(length(formals(useFunction)) != 2){
warning(paste("'userFun' should have",
"two arguments 'x' and 'y'"))
}
nonCppf2 <- function(useFunction){
function(pcmatrix, ncmatrix, ...){
x <- 1:(nrow(pcmatrix));  lx <- length(x)
y <- 1:(nrow(ncmatrix)); ly <- length(y)
MM <- matrix(ncol = lx * ly , nrow = 2)
MM[1,] <- rep(x, times = ly )
MM[2,] <- as.vector(unlist(lapply(y,
function(y, lx) {rep(y, times = lx)},lx)))
cormatrix <- matrix(ncol = ly , nrow = lx)
for(i in 1:ncol(MM)){
z1 <- MM[1,i]
z2 <- MM[2,i]
cormatrix[z1,z2] <- useFunction(
pcmatrix[z1, ],ncmatrix[z2, ])
}
return(cormatrix)
} # function end inner
} # function end
to_apply <- nonCppf2(useFunction)
return(to_apply)
}
}
## SECTION3: DISTANCE METRIC
# do the "spearman" method
if(mh_promise == "spearman"){
cp_union <- unique(unlist(trait_list))
union_matrix <- matrix(NA, nrow = length(cp_union),
ncol = length(trait_list))
rownames(union_matrix) <- cp_union; n = 1
for(m in c(1:length(linc_class))[na_in]){
x <- linc_class[[m]]@linCenvir$linc@correlation$cormatrix
rest_union <- intersect(cp_union, rownames(x))
spear_value <- x[rest_union, as.character(query)]
union_matrix[rest_union, n] <- spear_value
n = n + 1
}
union_cor <- try(callcor("spearman", NULL,"pairwise")(
t(union_matrix), t(union_matrix)), silent = TRUE)
if(class(union_cor) == "try-error" |
base::anyNA(union_cor)) stop(errorm08)
crude_dist <- (1 - union_cor)
}
# do the 'dicedist' method
if(mh_promise == "dicedist"){
c_matrix <- matrix(NA, ncol = length(trait_list),
nrow = tr_promise)
for(k in 1:length(trait_list)){
c_matrix[,k] <- trait_list[[k]]
}
crude_dist <- c_dicedistance(c_matrix)
}
cp_union <- unique(unlist(trait_list))
union_matrix <- matrix(NA, nrow = length(cp_union),
ncol = length(trait_list))
rownames(union_matrix) <- cp_union; n = 1
for(m in c(1:length(linc_class))[na_in]){
x <- linc_class[[m]]@linCenvir$linc@correlation$cormatrix
rest_union <- intersect(cp_union, rownames(x))
spear_value <- x[rest_union, as.character(query)]
union_matrix[rest_union, n] <- spear_value
n = n + 1
}
union_cor <- try(callcor("spearman", NULL,"pairwise")(
t(union_matrix), t(union_matrix)), silent = TRUE)
if(class(union_cor) == "try-error" |
base::anyNA(union_cor)) stop(errorm08)
crude_dist <- (1 - union_cor)
}
union_cor <- try(callcor("spearman", NULL,"pairwise")(
t(union_matrix), t(union_matrix)), silent = TRUE)
union_cor
Rcpp::sourceCpp('src/Cppspear.cpp')
## SECTION3: DISTANCE METRIC
# do the "spearman" method
if(mh_promise == "spearman"){
cp_union <- unique(unlist(trait_list))
union_matrix <- matrix(NA, nrow = length(cp_union),
ncol = length(trait_list))
rownames(union_matrix) <- cp_union; n = 1
for(m in c(1:length(linc_class))[na_in]){
x <- linc_class[[m]]@linCenvir$linc@correlation$cormatrix
rest_union <- intersect(cp_union, rownames(x))
spear_value <- x[rest_union, as.character(query)]
union_matrix[rest_union, n] <- spear_value
n = n + 1
}
union_cor <- try(callcor("spearman", NULL,"pairwise")(
t(union_matrix), t(union_matrix)), silent = TRUE)
if(class(union_cor) == "try-error" |
base::anyNA(union_cor)) stop(errorm08)
crude_dist <- (1 - union_cor)
}
# do the 'dicedist' method
if(mh_promise == "dicedist"){
c_matrix <- matrix(NA, ncol = length(trait_list),
nrow = tr_promise)
for(k in 1:length(trait_list)){
c_matrix[,k] <- trait_list[[k]]
}
crude_dist <- c_dicedistance(c_matrix)
}
# distmatrix and dendrogram
colnames(crude_dist) <- c_name
rownames(crude_dist) <- c_name
distmat <- as.dist(crude_dist)
dist_data <- as.data.frame(crude_dist)
colnames(dist_data) <- paste((1:length(trait_list)),
"_", sep = "")
rownames(dist_data) <- c_name
dist_clust <- hclust(distmat, method = "average")
#suppressPackageStartupMessages(require("ape"))
dist_phylo <- as.phylo(dist_clust)
dist_phylo$tip.label <- colnames(crude_dist)
#shared interaction partners
m_len <- length(trait_list)
si_promise <- matrix(0, ncol = m_len, nrow = m_len)
for(s in 1:m_len){
for(i in 1:m_len){
if(si_promise[i,s] == 0){
si_promise[s,i] <- length(intersect(trait_list[[i]],
trait_list[[s]]))
}
}
}
rownames(si_promise) <- colnames(crude_dist) #c_name
colnames(si_promise) <- colnames(crude_dist) #c_name
tree <- ggtree(dist_phylo, colour = "dodgerblue4",
layout= "rectangular", alpha = 0.5, size= 1 ) +
coord_flip() + scale_x_reverse() +
geom_tiplab(size = 3.5, angle = -90,
colour = c_color, hjust = 0)
require(ggtree)
tree <- ggtree(dist_phylo, colour = "dodgerblue4",
layout= "rectangular", alpha = 0.5, size= 1 ) +
coord_flip() + scale_x_reverse() +
geom_tiplab(size = 3.5, angle = -90,
colour = c_color, hjust = 0)
dist_phylo <- as.phylo(dist_clust)
dist_phylo$tip.label <- colnames(crude_dist)
#shared interaction partners
# distmatrix and dendrogram
colnames(crude_dist) <- c_name
rownames(crude_dist) <- c_name
distmat <- as.dist(crude_dist)
dist_data <- as.data.frame(crude_dist)
colnames(dist_data) <- paste((1:length(trait_list)),
"_", sep = "")
rownames(dist_data) <- c_name
dist_clust <- hclust(distmat, method = "average")
#suppressPackageStartupMessages(require("ape"))
dist_phylo <- as.phylo(dist_clust)
dist_phylo$tip.label <- colnames(crude_dist)
require(ape)
# distmatrix and dendrogram
colnames(crude_dist) <- c_name
rownames(crude_dist) <- c_name
distmat <- as.dist(crude_dist)
dist_data <- as.data.frame(crude_dist)
colnames(dist_data) <- paste((1:length(trait_list)),
"_", sep = "")
rownames(dist_data) <- c_name
dist_clust <- hclust(distmat, method = "average")
#suppressPackageStartupMessages(require("ape"))
dist_phylo <- as.phylo(dist_clust)
dist_phylo$tip.label <- colnames(crude_dist)
tree <- ggtree(dist_phylo, colour = "dodgerblue4",
layout= "rectangular", alpha = 0.5, size= 1 ) +
coord_flip() + scale_x_reverse() +
geom_tiplab(size = 3.5, angle = -90,
colour = c_color, hjust = 0)
clust_heat <- gheatmap(tree, si_promise, offset = 0.3,
width = 1.2, colnames = TRUE,
colnames_position = "top",
low = "white", high = "black")
si_promise
tree
str(dist_phylo)
n_partner <- as.data.frame(si_promise)
rownames(n_partner) <- colnames(crude_dist) #c_name
colnames(n_partner) <- colnames(crude_dist) #c_name
clust_heat <- gheatmap(tree, si_promise, offset = 0.3,
width = 1.2, colnames = TRUE,
colnames_position = "top",
low = "white", high = "black")
#low = "dodgerblue4", high = "white")
clust_heat <- gheatmap(tree, n_partner, offset = 0.3,
width = 1.2, colnames = TRUE,
colnames_position = "top",
low = "white", high = "black")
clust_heat
n_partner
str(n_partner)
?gheatmap
clust_heat <- gheatmap(tree, n_partner, offset = 0.3,
width = 1.2, colnames = TRUE, colnames_level = 5,
colnames_position = "top",
low = "white", high = "black")
#low = "dodgerblue4", high = "white")
clust_heat
clust_heat <- gheatmap(tree, n_partner, offset = 0.3,
width = 1.2, colnames = TRUE, colnames_level = 1,
colnames_position = "top",
low = "white", high = "black")
#low = "dodgerblue4", high = "white")
clust_heat
n_partner <- as.data.frame(as.character(si_promise))
n_partner
si_promise
?as.matrix
m_len <- length(trait_list)
si_promise <- matrix(0, ncol = m_len, nrow = m_len)
for(s in 1:m_len){
for(i in 1:m_len){
if(si_promise[i,s] == 0){
partners <- length(intersect(trait_list[[i]],
trait_list[[s]]))
si_promise[s,i] <- as.character(partners)
}
}
}
si_promise
n_partner <- as.data.frame(si_promise)
rownames(n_partner) <- colnames(crude_dist) #c_name
colnames(n_partner) <- colnames(crude_dist) #c_name
## SECTION4: PLOTTING
# plot the cluster
tree <- ggtree(dist_phylo, colour = "dodgerblue4",
layout= "rectangular", alpha = 0.5, size= 1 ) +
coord_flip() + scale_x_reverse() +
geom_tiplab(size = 3.5, angle = -90,
colour = c_color, hjust = 0)
clust_heat <- gheatmap(tree, n_partner, offset = 0.3,
width = 1.2, colnames = TRUE,
colnames_position = "top",
low = "white", high = "black")
#low = "dodgerblue4", high = "white")
clust_heat
clust_heat <- guide_legend(title = "wwwwww")
clust_heat <- gheatmap(tree, n_partner, offset = 0.3,
width = 1.2, colnames = TRUE,
colnames_position = "top",
low = "white", high = "black")
#low = "dodgerblue4", high = "white")
clust_heat <- clust_heat + guide_legend(title = "wwwwww")
n_partner <- as.data.frame(si_promise)
rownames(n_partner) <- colnames(crude_dist)
colnames(n_partner) <- colnames(crude_dist)
tree <- ggtree(dist_phylo, colour = "dodgerblue4",
layout= "rectangular", alpha = 0.5, size= 1 ) +
coord_flip() + scale_x_reverse() +
geom_tiplab(size = 3.5, angle = -90,
colour = c_color, hjust = 0)
clust_heat <- gheatmap(tree, n_partner, offset = 0.3,
width = 1.2, colnames = TRUE,
colnames_position = "top",
low = "white", high = "black")
#low = "dodgerblue4", high = "white")
clust_heat
#shared interaction partners
m_len <- length(trait_list)
si_promise <- matrix(0, ncol = m_len, nrow = m_len)
for(s in 1:m_len){
for(i in 1:m_len){
if(si_promise[i,s] == 0){
partners <- length(intersect(trait_list[[i]],
trait_list[[s]]))
si_promise[s,i] <- partners
}
}
}
n_partner <- as.data.frame(si_promise)
rownames(n_partner) <- colnames(crude_dist)
colnames(n_partner) <- colnames(crude_dist)
tree <- ggtree(dist_phylo, colour = "dodgerblue4",
layout= "rectangular", alpha = 0.5, size= 1 ) +
coord_flip() + scale_x_reverse() +
geom_tiplab(size = 3.5, angle = -90,
colour = c_color, hjust = 0)
clust_heat <- gheatmap(tree, n_partner, offset = 0.3,
width = 1.2, colnames = TRUE,
colnames_position = "top",
low = "white", high = "black")
#low = "dodgerblue4", high = "white")
clust_heat
clust_heat <- clust_heat + guide_legend(label = TRUE)
clust_heat <- gheatmap(tree, n_partner, offset = 0.3,
width = 1.2, colnames = TRUE,
colnames_position = "top",
low = "white", high = "black")
#low = "dodgerblue4", high = "white")
clust_heat + guide_legend(label = TRUE)
clust_heat <- gheatmap(tree, n_partner, offset = 0.3,
width = 1.2, colnames = TRUE,
colnames_position = "top",
low = "white", high = "black") + guide_legend(label = TRUE)
clust_heat <- gheatmap(tree, n_partner, offset = 0.3,
width = 1.2, colnames = TRUE,
colnames_position = "top",
low = "white", high = "black") + guide_legend(label = TRUE)
#low = "dodgerblue4", high = "white")
clust_heat + scale_fill_continuous(guide = guide_legend(abel = TRUE))
clust_heat + geom_text(aes(fill = value, label = value)
)
clust_heat + geom_text(aes(fill = values, label = values))
str(clust_heat)
clust_heat + scale_fill_continuous(guide = guide_legend(label = TRUE, keywidth = 20))
library(LINC)
?querycluster
data(BRAIN_EXPR)
# add custom names and colors
gbm_cluster <- gbm_cluster + feature(customID = "CANCER_GBM", customCol = "red")
ctx_cluster <- ctx_cluster + feature(customID = "HEALTHY_CTX", customCol = "blue")
hpc_cluster <- hpc_cluster + feature(customID = "HEALTHY_HPC", customCol = "blue")
crbl_cluster <- crbl_cluster + feature(customID = "HEALTHY_CRBL", customCol = "blue")
# plot the dendrogram
querycluster('647979', queryTitle = 'NORAD',
gbm_cluster,  # Glioblastoma
ctx_cluster,  # Cortex
hpc_cluster,  # Hippocampus
crbl_cluster) # Cerebellum
library(LINC)
?querycluster
data(BRAIN_EXPR)
# add custom names and colors
gbm_cluster <- gbm_cluster + feature(customID = "CANCER_GBM", customCol = "red")
ctx_cluster <- ctx_cluster + feature(customID = "HEALTHY_CTX", customCol = "blue")
hpc_cluster <- hpc_cluster + feature(customID = "HEALTHY_HPC", customCol = "blue")
crbl_cluster <- crbl_cluster + feature(customID = "HEALTHY_CRBL", customCol = "blue")
# plot the dendrogram
querycluster('647979', queryTitle = 'NORAD',
gbm_cluster,  # Glioblastoma
ctx_cluster,  # Cortex
hpc_cluster,  # Hippocampus
crbl_cluster) # Cerebellum
c(1:10)
a[-b]
a <- c(1:10)
b <- c(1:3)
a[-b]
library(LINC)
?linc
data(BRAIN_EXPR)
# call 'linc' with no further arguments
crbl_matrix <- linc(cerebellum, codingGenes = pcgenes_crbl)
# remove first seven principle components
crbl_matrix_pc <- linc(cerebellum, codingGenes = pcgenes_crbl, rmPC = c(1:7))
crbl_matrix_pc <- linc(cerebellum, codingGenes = pcgenes_crbl, rmPC = c(0:7))
c(0:7)
crbl_matrix_pc <- linc(cerebellum, codingGenes = pcgenes_crbl, rmPC = c(1:300))
crbl_matrix_pc <- linc(cerebellum, codingGenes = pcgenes_crbl, rmPC = "qqq")
colnum <- 50
rmPC <- c(1:7)
if(!is.null(rmPC)){
col_sel <- try(c(1:colnum)[-rmPC], silent = TRUE)
if(class(col_sel) == "try-error" ) stop(errorm08)
if(length(col_sel) == 0 |
anyNA(col_sel)) stop(errorm08)
rm_promise <- c(1:colnum)[-rmPC]
store$PCA <- TRUE; message(inform05)
}
rm_promise
?singlelinc
meg3 <- singlelinc(crbl_matrix, query = "55384", threshold = 0.00005, ont = 'BP', verbose = F)
str(meg3)
plotlinc(meg3)
require(RColorBrewer)
rev(brewer.pal(9,"PuBu"))
?brewer.pal
?singelinc
library(LINC)
?singlelinc
meg3 <- singlelinc(crbl_matrix, query = "55384", threshold = 0.00005, ont = 'BP', verbose = F)
## Loading required package: GO.db
plotlinc(meg3)
data(BRAIN_EXPR)
meg3 <- singlelinc(crbl_matrix, query = "55384", threshold = 0.00005, ont = 'BP', verbose = F)
plotlinc(meg3)
library(LINC)
data(BRAIN_EXPR)
meg3 <- singlelinc(crbl_matrix, query = "55384", threshold = 0.00005, ont = 'BP', verbose = F)
plotlinc(meg3)
brewer.pal(9,"Paired")
require(RColorBrewer)
brewer.pal(9,"Paired")
library(LINC)
?overlaylinc
data(BRAIN_EXPR)
# compare two brain tissues using 'overlaylinc'
ctx_cc <- ctx_cc + feature(customID = "Cortex vs. Cerebellum")
overlaylinc(ctx_cc, crbl_cc)
meg3 <- singlelinc(crbl_matrix, query = "55384", threshold = 0.00005, ont = 'BP', verbose = F)
## Loading required package: GO.db
plotlinc(meg3)
library(LINC)
?overlaylinc
data(BRAIN_EXPR)
# compare two brain tissues using 'overlaylinc'
ctx_cc <- ctx_cc + feature(customID = "Cortex vs. Cerebellum")
overlaylinc(ctx_cc, crbl_cc)
library(LINC)
data(BRAIN_EXPR)
# compare two brain tissues using 'overlaylinc'
ctx_cc <- ctx_cc + feature(customID = "Cortex vs. Cerebellum")
overlaylinc(ctx_cc, crbl_cc)
R CMD BiocCheck package
source("http://bioconductor.org/biocLite.R")
biocLite("BiocCheck")
library(BiocCheck)
getwd()
BiocCheck("D:/data/Eigene Dateien/Documents/Dateien/Universität/Master/MASTER/LINC")
?BiocCheck
warnings()
ls("D:/data/Eigene Dateien/Documents/Dateien/Universität/Master/MASTER/LINC")
install.packages("ape")
install.packages("ape")
install.packages("plyr")
install.packages('stringi')
install.packages(jsonlite')
install.packages('jsonlite')
install.packages('Hmisc')
install.packages('tidyr')
library(LINC)
BiocCheck(" ~/Dateien/Universität/Master/MASTER/LINC_0.99.0.tar.gz")
require(BiocCheck)
BiocCheck(" ~/Dateien/Universität/Master/MASTER/LINC_0.99.0.tar.gz")
BiocCheck("D:/data/Eigene Dateien/Documents/Dateien/Universität/Master/MASTER/LINC_0.99.0.tar.gz")
setwd("D:/data/Eigene Dateien/Documents/Dateien/Universität/Master/MASTER/")
BiocCheck("LINC_0.99.0.tar.gz")
BiocCheck(LINC_0.99.0.tar.gz)
BiocCheck(LINC)
BiocCheck("LINC")
packageDir <- system.file("testpackages", "testpkg0", package="BiocCheck")
packageDir
getwd()
packageDir <- system.file("testpackages", "testpkg0", package="BiocCheck")
BiocCheck(packageDir)
getwd()
setwd("D:/data/Eigene Dateien/Documents/Dateien/Universität/Master/MASTER/LINC")
BiocCheck()
BiocCheck("LINC")
BiocCheck("LINC_0.99.0.tar.gz")
BiocCheck("D:/LINC_0.99.0.tar.gz")
BiocCheck("C:/LINC_0.99.0.tar.gz")
packageDir <- system.file("LINC_0.99.0.tar.gz", package="LINC")
packageDir
BiocCheck("C:/LINC_0.99.0.tar.gz")
BiocCheck( "C:/Program Files/R/R-3.2.4/library/LINC/)
BiocCheck( "C:/Program Files/R/R-3.2.4/library/LINC/")
BiocCheck( "C:/Program Files/R/R-3.2.4/library/LINC/")
BiocCheck( "C:/Program Files/R/R-3.2.4/library/LINC")
BiocCheck( "LINC")
require(BiocCheck)
BioCheck("C:/Users/manuel.goepferich/Desktop/LINC_0.99.0.tar.gz")
BiocCheck("C:/Users/manuel.goepferich/Desktop/LINC_0.99.0.tar.gz")
BiocCheck("C:/Users/manuel.goepferich/Desktop/LINC/")
BiocCheck("C:/Users/manuel.goepferich/Desktop/LINC")
BiocCheck("C:/Users/manuel.goepferich/Desktop/testpackages/testpkg1/")
BiocCheck("C:/Users/manuel.goepferich/Desktop/testpackages/testpkg1")
BiocCheck("C:/Users/manuel.goepferich/Desktop/testpackages/testpkg0")
BiocCheck("C:/Users/manuel.goepferich/Desktop/LINC")
BiocCheck("C:/Users/manuel.goepferich/Desktop/LINC")
BiocCheck("C:/Users/manuel.goepferich/Desktop/LINC")
BiocCheck("C:/Users/manuel.goepferich/Desktop/LINC")
?useDynLib
require(BiocCheck)
?BiocCheck
usage()
R.Version()
